#!/usr/bin/env python3
"""
Complete AI Baselines Demo - Shows all effects clearly
"""

import json
import shutil
from pathlib import Path
from ai_quality_validation import AIQualityValidator

def main():
    print("🚀 Complete AI Baselines Demo")
    print("=" * 50)
    print("This demonstrates the AI quality validation system:")
    print("1. Baseline deletion → auto-creation")
    print("2. Threshold effects (0.8 vs 0.95)")
    print("3. Baseline corruption effects")
    print("=" * 50)
    
    # Demo 1: Baseline Deletion
    print("\n🎯 DEMO 1: Baseline Deletion")
    print("-" * 30)
    
    baselines_dir = Path("ai_quality_baselines")
    text_baseline = baselines_dir / "text_baseline.json"
    
    # Backup original
    backup_file = text_baseline.with_suffix('.json.backup')
    shutil.copy2(text_baseline, backup_file)
    
    # Delete baseline
    text_baseline.unlink()
    print("🗑️  Deleted text_baseline.json")
    
    # Test with validator (should auto-create)
    validator = AIQualityValidator()
    test_content = "Daily Brief - 2024-01-15\n\nEmail Summary:\n• New client inquiry - contact@newclient.com\n• Project update - manager@company.com\n\nKey Insights:\n• 2 new emails received\n• 1 client inquiry requires response\n• 1 project update to review\n\nAction Items:\n• Respond to client inquiry\n• Review project update\n\nGenerated by Person.ai"
    
    result = validator.validate_content_quality(test_content, "text")
    print(f"✅ Auto-created baseline: {result['validations']['semantic_similarity']['details']}")
    
    # Restore original
    shutil.copy2(backup_file, text_baseline)
    backup_file.unlink()
    print("🔄 Restored original baseline")
    
    # Demo 2: Threshold Effects
    print("\n🎯 DEMO 2: Threshold Effects")
    print("-" * 30)
    
    # Create content with varying similarity
    test_cases = [
        {
            "name": "Identical Content",
            "content": """Daily Brief - 2024-01-15

Email Summary:
• Quarterly Sales Report - john@company.com
• Client Meeting Request - sarah@client.com
• Invoice Payment Overdue - billing@vendor.com

Key Insights:
• 3 urgent items require immediate attention
• 2 client meetings scheduled for this week
• 1 invoice payment overdue
• New project proposal received

Action Items:
• Review quarterly sales report
• Schedule follow-up meeting with client
• Process invoice payment
• Prepare project proposal

Generated by Person.ai"""
        },
        {
            "name": "Similar Content",
            "content": """Daily Brief - 2024-01-15

Email Summary:
• Quarterly Sales Report - john@company.com
• Client Meeting Request - sarah@client.com
• Invoice Payment Overdue - billing@vendor.com

Key Insights:
• 3 urgent items require immediate attention
• 2 client meetings scheduled for this week
• 1 invoice payment overdue
• New project proposal received

Action Items:
• Review quarterly sales report
• Schedule follow-up meeting with client
• Process invoice payment
• Prepare project proposal

Generated by Person.ai"""
        },
        {
            "name": "Different Content",
            "content": """Morning Update - 2024-01-15

New Messages:
• Project Status Update - manager@company.com
• Budget Review Request - finance@company.com
• Team Meeting Reminder - admin@company.com

Summary:
• 3 new messages received
• 1 budget review needed
• 1 team meeting today

Tasks:
• Review project status
• Prepare budget review
• Attend team meeting

Created by Person.ai"""
        }
    ]
    
    for test_case in test_cases:
        print(f"\n📝 {test_case['name']}:")
        
        # Test with 0.8 threshold
        class ThresholdValidator(AIQualityValidator):
            def __init__(self, threshold):
                super().__init__()
                self.threshold = threshold
            
            def _validate_semantic_similarity(self, content: str, content_type: str):
                baseline_key = f"{content_type}_baseline"
                if baseline_key not in self.baselines:
                    return {"score": 0.0, "passed": False, "details": "No baseline available"}
                
                baseline = self.baselines[baseline_key]
                similarity = self._calculate_similarity(content, baseline["content"])
                
                passed = similarity >= self.threshold
                
                return {
                    "score": similarity,
                    "passed": passed,
                    "details": f"Similarity: {similarity:.3f} (threshold: {self.threshold})",
                    "similarity": similarity,
                    "baseline_created": baseline["created_at"]
                }
        
        validator_08 = ThresholdValidator(0.8)
        validator_95 = ThresholdValidator(0.95)
        
        result_08 = validator_08.validate_content_quality(test_case['content'], "text")
        result_95 = validator_95.validate_content_quality(test_case['content'], "text")
        
        score_08 = result_08['validations']['semantic_similarity']['score']
        passed_08 = result_08['validations']['semantic_similarity']['passed']
        score_95 = result_95['validations']['semantic_similarity']['score']
        passed_95 = result_95['validations']['semantic_similarity']['passed']
        
        print(f"   Threshold 0.8:  {score_08:.3f} - {'✅ PASS' if passed_08 else '❌ FAIL'}")
        print(f"   Threshold 0.95: {score_95:.3f} - {'✅ PASS' if passed_95 else '❌ FAIL'}")
        
        if passed_08 and not passed_95:
            print(f"   🎯 BREAKPOINT: Passes 0.8 but fails 0.95!")
        elif not passed_08 and not passed_95:
            print(f"   📉 Fails both thresholds")
        elif passed_08 and passed_95:
            print(f"   📈 Passes both thresholds")
    
    # Demo 3: Baseline Corruption
    print("\n🎯 DEMO 3: Baseline Corruption")
    print("-" * 30)
    
    # Corrupt the baseline
    with open(text_baseline, 'r') as f:
        baseline_data = json.load(f)
    
    original_content = baseline_data["content"]
    baseline_data["content"] = "COMPLETELY DIFFERENT CONTENT - NOT SIMILAR AT ALL"
    
    with open(text_baseline, 'w') as f:
        json.dump(baseline_data, f, indent=2)
    
    print("🔧 Corrupted baseline content")
    
    # Test with corrupted baseline
    validator = AIQualityValidator()
    result = validator.validate_content_quality(test_content, "text")
    score = result['validations']['semantic_similarity']['score']
    passed = result['validations']['semantic_similarity']['passed']
    
    print(f"   Score: {score:.3f}")
    print(f"   Passed: {'✅ YES' if passed else '❌ NO'}")
    print(f"   Details: {result['validations']['semantic_similarity']['details']}")
    
    # Restore original
    baseline_data["content"] = original_content
    with open(text_baseline, 'w') as f:
        json.dump(baseline_data, f, indent=2)
    
    print("🔄 Restored original baseline")
    
    print("\n🎉 DEMO COMPLETE!")
    print("=" * 50)
    print("Key takeaways:")
    print("• Deleted baselines → auto-created (test 'passes' but resets baseline)")
    print("• Higher thresholds → stricter validation (0.8 → 0.95)")
    print("• Corrupted baselines → low similarity scores")
    print("• System handles edge cases gracefully")

if __name__ == "__main__":
    main()
