"""
Content Engine Mock Service (OpenAI-style)
"""
import os
import json
import time
from datetime import datetime
from flask import Flask, jsonify, request

app = Flask(__name__)

class ContentEngineMock:
    def __init__(self):
        self.api_key = os.getenv('OPENAI_API_KEY', 'mock_key')
    
    def generate_brief_content(self, gmail_data):
        """Generate brief content from Gmail data (OpenAI-style)"""
        emails = gmail_data.get('emails', [])
        
        # Extract key information
        email_summary = self._summarize_emails(emails)
        key_insights = self._extract_key_insights(emails)
        action_items = self._identify_action_items(emails)
        
        # Generate content
        text_content = self._generate_text_brief(email_summary, key_insights, action_items)
        audio_script = self._generate_audio_script(email_summary, key_insights, action_items)
        
        return {
            'text_content': text_content,
            'audio_script': audio_script,
            'metadata': {
                'generation_time': time.time(),
                'email_count': len(emails),
                'confidence_score': 0.85,
                'model': 'gpt-4-mock',
                'tokens_used': len(text_content) + len(audio_script)
            }
        }
    
    def _summarize_emails(self, emails):
        """Summarize email content"""
        summaries = []
        for email in emails[:10]:  # Top 10 emails
            # Extract subject and sender from headers
            subject = "No Subject"
            sender = "Unknown Sender"
            
            if 'payload' in email and 'headers' in email['payload']:
                for header in email['payload']['headers']:
                    if header['name'] == 'Subject':
                        subject = header['value']
                    elif header['name'] == 'From':
                        sender = header['value']
            
            summaries.append(f"• {subject} - {sender}")
        return "\n".join(summaries)
    
    def _extract_key_insights(self, emails):
        """Extract key insights from emails"""
        insights = [
            "3 urgent items require immediate attention",
            "2 client meetings scheduled for this week",
            "1 invoice payment overdue",
            "New project proposal received",
            "Team performance review pending"
        ]
        return insights[:min(len(emails), 5)]  # Limit based on email count
    
    def _identify_action_items(self, emails):
        """Identify action items from emails"""
        actions = [
            "Review quarterly sales report",
            "Schedule follow-up meeting with client",
            "Process invoice payment",
            "Prepare project proposal",
            "Complete team performance review"
        ]
        return actions[:min(len(emails), 5)]  # Limit based on email count
    
    def _generate_text_brief(self, summary, insights, actions):
        """Generate text brief"""
        return f"""
Daily Brief - {datetime.now().strftime('%Y-%m-%d')}

Email Summary:
{summary}

Key Insights:
{chr(10).join(f'• {insight}' for insight in insights)}

Action Items:
{chr(10).join(f'• {action}' for action in actions)}

Generated by Person.ai
        """.strip()
    
    def _generate_audio_script(self, summary, insights, actions):
        """Generate audio script"""
        return f"""
Good morning! Here's your daily brief for {datetime.now().strftime('%B %d, %Y')}.

{summary}

Key insights for today: {', '.join(insights)}.

Your action items: {', '.join(actions)}.

This brief was generated by Person.ai. Have a productive day!
        """.strip()

# Initialize service
content_engine = ContentEngineMock()

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'service': 'content-engine-mock',
        'timestamp': datetime.now().isoformat(),
        'model': 'gpt-4-mock'
    })

@app.route('/v1/chat/completions', methods=['POST'])
def chat_completions():
    """OpenAI-style chat completions endpoint"""
    try:
        data = request.json
        messages = data.get('messages', [])
        
        # Generate response based on messages
        response_text = content_engine._generate_text_brief(
            "Sample email summary",
            ["Key insight 1", "Key insight 2"],
            ["Action item 1", "Action item 2"]
        )
        
        return jsonify({
            'id': f"chatcmpl-{int(time.time())}",
            'object': 'chat.completion',
            'created': int(time.time()),
            'model': 'gpt-4-mock',
            'choices': [{
                'index': 0,
                'message': {
                    'role': 'assistant',
                    'content': response_text
                },
                'finish_reason': 'stop'
            }],
            'usage': {
                'prompt_tokens': 100,
                'completion_tokens': 200,
                'total_tokens': 300
            }
        })
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/generate-brief', methods=['POST'])
def generate_brief():
    """Generate daily brief endpoint"""
    try:
        data = request.json
        if not data:
            return jsonify({"error": "No JSON data provided"}), 400
        
        gmail_data = data.get('gmail_data', {})
        if not gmail_data:
            return jsonify({"error": "No gmail_data provided"}), 400
        
        # Generate content
        content = content_engine.generate_brief_content(gmail_data)
        
        return jsonify({
            'status': 'success',
            'content': content,
            'generated_at': datetime.now().isoformat()
        })
        
    except Exception as e:
        print(f"Error in generate_brief: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
