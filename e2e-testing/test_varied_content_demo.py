#!/usr/bin/env python3
"""
Varied Content Demo - Shows threshold effect with different content variations
"""

from ai_quality_validation import AIQualityValidator

def test_varied_content():
    """Test with content that varies in similarity"""
    print("🎯 Varied Content Threshold Demo")
    print("=" * 45)
    
    # Different content variations with varying similarity
    test_cases = [
        {
            "name": "Identical Content",
            "content": """Daily Brief - 2024-01-15

Email Summary:
• Quarterly Sales Report - john@company.com
• Client Meeting Request - sarah@client.com
• Invoice Payment Overdue - billing@vendor.com

Key Insights:
• 3 urgent items require immediate attention
• 2 client meetings scheduled for this week
• 1 invoice payment overdue
• New project proposal received

Action Items:
• Review quarterly sales report
• Schedule follow-up meeting with client
• Process invoice payment
• Prepare project proposal

Generated by Person.ai"""
        },
        {
            "name": "Similar Content (Minor Changes)",
            "content": """Daily Brief - 2024-01-15

Email Summary:
• Quarterly Sales Report - john@company.com
• Client Meeting Request - sarah@client.com
• Invoice Payment Overdue - billing@vendor.com

Key Insights:
• 3 urgent items require immediate attention
• 2 client meetings scheduled for this week
• 1 invoice payment overdue
• New project proposal received

Action Items:
• Review quarterly sales report
• Schedule follow-up meeting with client
• Process invoice payment
• Prepare project proposal

Generated by Person.ai"""
        },
        {
            "name": "Moderately Different Content",
            "content": """Daily Brief - 2024-01-15

Email Summary:
• Weekly Sales Report - john@company.com
• Client Meeting Request - sarah@client.com
• Invoice Payment Overdue - billing@vendor.com

Key Insights:
• 3 urgent items require immediate attention
• 2 client meetings scheduled for this week
• 1 invoice payment overdue
• New project proposal received

Action Items:
• Review weekly sales report
• Schedule follow-up meeting with client
• Process invoice payment
• Prepare project proposal

Generated by Person.ai"""
        },
        {
            "name": "Very Different Content",
            "content": """Morning Update - 2024-01-15

New Messages:
• Project Status Update - manager@company.com
• Budget Review Request - finance@company.com
• Team Meeting Reminder - admin@company.com

Summary:
• 3 new messages received
• 1 budget review needed
• 1 team meeting today

Tasks:
• Review project status
• Prepare budget review
• Attend team meeting

Created by Person.ai"""
        }
    ]
    
    thresholds = [0.8, 0.95]
    
    for test_case in test_cases:
        print(f"\n📝 {test_case['name']}:")
        print(f"   Length: {len(test_case['content'])} chars")
        print(f"   Preview: {test_case['content'][:60]}...")
        
        for threshold in thresholds:
            print(f"\n   🧪 Threshold {threshold}:")
            
            # Create custom validator with specific threshold
            class CustomValidator(AIQualityValidator):
                def _validate_semantic_similarity(self, content: str, content_type: str):
                    baseline_key = f"{content_type}_baseline"
                    if baseline_key not in self.baselines:
                        return {"score": 0.0, "passed": False, "details": "No baseline available"}
                    
                    baseline = self.baselines[baseline_key]
                    similarity = self._calculate_similarity(content, baseline["content"])
                    
                    passed = similarity >= threshold
                    
                    return {
                        "score": similarity,
                        "passed": passed,
                        "details": f"Similarity: {similarity:.3f} (threshold: {threshold})",
                        "similarity": similarity,
                        "baseline_created": baseline["created_at"]
                    }
            
            validator = CustomValidator()
            result = validator.validate_content_quality(test_case['content'], "text")
            
            score = result['validations']['semantic_similarity']['score']
            passed = result['validations']['semantic_similarity']['passed']
            
            print(f"      Score: {score:.3f}")
            print(f"      Passed: {'✅ YES' if passed else '❌ NO'}")
        
        print("   " + "-" * 30)

if __name__ == "__main__":
    test_varied_content()
